<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Users - School Events</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <!-- Header -->
    <%- include('../partials/header') %>

    <!-- Main Content -->
    <main class="container my-5">
        <div class="row">
            <div class="col-12">
                <div class="card shadow-lg border-0" data-aos="fade-up">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">
                            <i class="fas fa-users me-2"></i>
                            Manage Users
                        </h3>
                        <a href="/admin/users/add" class="btn btn-light">
                            <i class="fas fa-plus me-2"></i>Add User
                        </a>
                    </div>
                    <div class="card-body p-4">
                        <!-- Filters -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <label for="roleFilter" class="form-label">Filter by Role</label>
                                <select class="form-select" id="roleFilter">
                                    <option value="">All Roles</option>
                                    <option value="admin">Admin</option>
                                    <option value="parent">Parent</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="statusFilter" class="form-label">Status</label>
                                <select class="form-select" id="statusFilter">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="searchInput" class="form-label">Search Users</label>
                                <input type="text" class="form-control" id="searchInput" placeholder="Search by name or email...">
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-outline-primary" onclick="refreshData()">
                                    <i class="fas fa-refresh me-2"></i>Refresh
                                </button>
                            </div>
                        </div>

                        <!-- Users Table -->
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Phone</th>
                                        <th>Students</th>
                                        <th>Joined Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTable">
                                    <!-- Data will be loaded dynamically -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Loading and No Data States -->
                        <div id="loadingState" class="text-center py-4" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading users...</p>
                        </div>

                        <div id="noDataState" class="text-center py-4" style="display: none;">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5>No users found</h5>
                            <p class="text-muted">Try adjusting your filters or add a new user.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- User Actions Modal -->
    <div class="modal fade" id="userActionsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Actions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" onclick="editUser()">
                            <i class="fas fa-edit me-2"></i>Edit User
                        </button>
                        <button class="btn btn-outline-warning" onclick="resetPassword()">
                            <i class="fas fa-key me-2"></i>Reset Password
                        </button>
                        <button class="btn btn-outline-info" onclick="viewDetails()">
                            <i class="fas fa-eye me-2"></i>View Details
                        </button>
                        <button class="btn btn-outline-danger" onclick="deleteUser()">
                            <i class="fas fa-trash me-2"></i>Delete User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user?</p>
                    <p class="text-danger"><strong>This action cannot be undone!</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                        <i class="fas fa-trash me-2"></i>Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <%- include('../partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="/js/main.js"></script>
    <script>
        // Initialize AOS
        AOS.init();

        let currentUserId = null;

        // Load users on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
        });

        // Filter event listeners
        document.getElementById('roleFilter').addEventListener('change', loadUsers);
        document.getElementById('statusFilter').addEventListener('change', loadUsers);
        document.getElementById('searchInput').addEventListener('input', debounce(loadUsers, 300));

        // Load users data
        function loadUsers() {
            const roleFilter = document.getElementById('roleFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const searchQuery = document.getElementById('searchInput').value;

            showLoading();

            fetch(`/admin/users/data?role=${roleFilter}&status=${statusFilter}&search=${searchQuery}`)
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        displayUsers(data.users);
                    } else {
                        showError('Failed to load users');
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error:', error);
                    showError('Failed to load users');
                });
        }

        // Display users in table
        function displayUsers(users) {
            const tbody = document.getElementById('usersTable');
            
            if (users.length === 0) {
                showNoData();
                return;
            }

            hideNoData();
            
            tbody.innerHTML = users.map(user => `
                <tr>
                    <td>
                        <strong>${user.first_name} ${user.last_name}</strong>
                    </td>
                    <td>
                        ${user.email}<br>
                        <small class="text-muted">ID: ${user.id}</small>
                    </td>
                    <td>
                        <span class="badge bg-${getRoleColor(user.role)}">
                            ${user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                        </span>
                    </td>
                    <td>
                        ${user.phone || '<span class="text-muted">Not provided</span>'}
                    </td>
                    <td>
                        <span class="badge bg-info">${user.student_count || 0}</span>
                    </td>
                    <td>
                        ${new Date(user.created_at).toLocaleDateString()}<br>
                        <small class="text-muted">${new Date(user.created_at).toLocaleTimeString()}</small>
                    </td>
                    <td>
                        <span class="badge bg-success">Active</span>
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="openUserActions(${user.id})">
                                <i class="fas fa-cog"></i>
                            </button>
                            <a href="/admin/users/${user.id}/edit" class="btn btn-sm btn-outline-warning">
                                <i class="fas fa-edit"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Get role color for badges
        function getRoleColor(role) {
            switch(role) {
                case 'admin': return 'danger';
                case 'parent': return 'primary';
                default: return 'secondary';
            }
        }

        // Open user actions modal
        function openUserActions(userId) {
            currentUserId = userId;
            const modal = new bootstrap.Modal(document.getElementById('userActionsModal'));
            modal.show();
        }

        // User action functions
        function editUser() {
            if (currentUserId) {
                window.location.href = `/admin/users/${currentUserId}/edit`;
            }
        }

        function resetPassword() {
            if (currentUserId) {
                if (confirm('Are you sure you want to reset this user\'s password?')) {
                    fetch(`/admin/users/${currentUserId}/reset-password`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showSuccess('Password reset successfully. New password: ' + data.newPassword);
                        } else {
                            showError(data.error || 'Failed to reset password');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError('Failed to reset password');
                    });
                }
            }
        }

        function viewDetails() {
            if (currentUserId) {
                window.location.href = `/admin/users/${currentUserId}`;
            }
        }

        function deleteUser() {
            if (currentUserId) {
                bootstrap.Modal.getInstance(document.getElementById('userActionsModal')).hide();
                const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
                modal.show();
            }
        }

        function confirmDelete() {
            if (currentUserId) {
                fetch(`/admin/users/${currentUserId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccess('User deleted successfully');
                        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                        loadUsers();
                    } else {
                        showError(data.error || 'Failed to delete user');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError('Failed to delete user');
                });
            }
        }

        // Utility functions
        function showLoading() {
            document.getElementById('loadingState').style.display = 'block';
            document.getElementById('usersTable').style.display = 'none';
            document.getElementById('noDataState').style.display = 'none';
        }

        function hideLoading() {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('usersTable').style.display = 'table-row-group';
        }

        function showNoData() {
            document.getElementById('noDataState').style.display = 'block';
            document.getElementById('usersTable').style.display = 'none';
        }

        function hideNoData() {
            document.getElementById('noDataState').style.display = 'none';
            document.getElementById('usersTable').style.display = 'table-row-group';
        }

        function refreshData() {
            loadUsers();
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function showSuccess(message) {
            // You can implement a toast notification here
            alert('Success: ' + message);
        }

        function showError(message) {
            // You can implement a toast notification here
            alert('Error: ' + message);
        }
    </script>
</body>
</html> 